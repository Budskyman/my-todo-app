<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>To-Do List</title>
  <link rel="stylesheet" href="/styles.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <style>
    /* CSS tambahan untuk tombol hapus */
    .delete-button {
      background-color: #e74c3c;
      color: white;
      border: none;
      padding: 5px 10px;
      cursor: pointer;
      font-size: 14px;
      border-radius: 5px;
    }
    
    .delete-button:hover {
      background-color: #c0392b;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>To-Do List</h1>

    <!-- Menampilkan jam analog -->
    <canvas id="analog-clock" width="300" height="300"></canvas>

    <!-- Menampilkan jam dan tanggal hari ini -->
    <div id="current-time"></div>

    <!-- Form untuk menambahkan tugas dan waktu -->
    <form action="/add" method="POST" class="input-form">
      <input type="text" name="todo" placeholder="Tambahkan tugas..." required>
      <input type="datetime-local" name="dueDate" required>
      <button type="submit">Tambah</button>
    </form>

    <!-- Daftar tugas -->
    <ul class="todo-list">
      <% if (todos && todos.length > 0) { %>
        <% todos.forEach((item, index) => { %>
          <li class="fade-in">
            <span><%= item.text %></span>
            <span class="due-time"> - <%= item.dueDate %></span>
            <!-- Tombol untuk menghapus tugas -->
            <form action="/delete" method="POST" style="display:inline;">
              <input type="hidden" name="index" value="<%= index %>">
              <button type="submit" class="delete-button">Hapus</button>
            </form>
          </li>
        <% }) %>
      <% } else { %>
        <li class="fade-in">Tidak ada tugas</li>
      <% } %>
    </ul>

  </div>

  <!-- Tambahkan elemen audio untuk suara notifikasi -->
  <audio id="notification-sound" src="/sounds/notification-sound.mp3" preload="auto"></audio>

  <script>
  const notificationSound = document.getElementById('notification-sound'); // Suara notifikasi
  const todos = <%- JSON.stringify(todos) %>;  // Mengambil todos dari server

  // Meminta izin untuk menampilkan notifikasi browser
  function requestNotificationPermission() {
    if (Notification.permission !== 'granted') {
      Notification.requestPermission().then(permission => {
        if (permission === 'granted') {
          console.log("Notifikasi diizinkan");
        } else {
          console.log("Notifikasi ditolak");
        }
      });
    } else {
      console.log("Notifikasi sudah diizinkan sebelumnya");
    }
  }

  // Fungsi untuk memeriksa tugas yang sudah lewat waktunya
  function checkForDueTasks() {
    const now = new Date();
    todos.forEach((item, index) => {
      const dueDate = new Date(item.dueDate);

      // Cek validitas dueDate
      if (isNaN(dueDate.getTime())) {
        console.error(`Tanggal tidak valid untuk tugas: ${item.text}`);
        console.log(`dueDate yang diterima: ${item.dueDate}`);
        return;  // Skip tugas yang memiliki tanggal tidak valid
      }

      // Debugging: Log waktu sekarang dan dueDate
      console.log(`Sekarang: ${now}, Due date: ${dueDate}`);
      
      // Cek apakah waktu sekarang sudah melewati waktu tugas
      if (now >= dueDate && !item.notified) {
        console.log(`Tugas " ${item.text} " sudah lewat waktunya!`);

        // Menampilkan kotak dialog
        alert(`Tugas jatuh tempo! \n\nTugas: ${item.text} \nWaktu: ${item.dueDate}`);

        // Mainkan suara hanya ketika tugas sudah jatuh tempo
        notificationSound.pause(); // Matikan suara terlebih dahulu jika sudah ada yang berbunyi
        notificationSound.currentTime = 0; // Reset ke awal
        notificationSound.play(); // Mainkan suara

        // Tandai tugas sebagai sudah diberi notifikasi
        item.notified = true;
      }
    });
  }

  // Update jam setiap detik dan cek tugas setiap detik
  setInterval(() => {
    checkForDueTasks(); // Cek tugas setiap detik
  }, 1000);

  // Meminta izin notifikasi ketika halaman pertama kali dimuat
  requestNotificationPermission();

  // Script untuk update jam analog secara real-time
  const canvas = document.getElementById('analog-clock');
  const ctx = canvas.getContext('2d');
  const radius = canvas.height / 2;
  ctx.translate(radius, radius); // Pindahkan pusat canvas ke tengah
  const clockRadius = radius * 0.9;

  // Draw the clock
  function drawClock() {
    const now = new Date();
    const hour = now.getHours();
    const minute = now.getMinutes();
    const second = now.getSeconds();

    // Clear the canvas
    ctx.clearRect(-radius, -radius, canvas.width, canvas.height);

    // Draw the clock face
    ctx.beginPath();
    ctx.arc(0, 0, clockRadius, 0, 2 * Math.PI);
    ctx.fillStyle = '#f3f3f3';
    ctx.fill();
    ctx.strokeStyle = '#2c3e50';
    ctx.lineWidth = 10;
    ctx.stroke();
    
    // Draw hour ticks (numbers) at correct positions
    ctx.font = '20px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    for (let i = 1; i <= 12; i++) {
      const angle = (i - 3) * Math.PI / 6;  // Perbaiki sudut agar angka mulai dari atas (12)
      const x = (clockRadius - 30) * Math.cos(angle);
      const y = (clockRadius - 30) * Math.sin(angle);
      ctx.fillStyle = '#2c3e50';
      ctx.fillText(i, x, y);
    }

    // Draw the hour hand
    const hourAngle = (Math.PI / 6) * ((hour % 12) + minute / 60);
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(clockRadius * 0.5 * Math.cos(hourAngle - Math.PI / 2), clockRadius * 0.5 * Math.sin(hourAngle - Math.PI / 2));
    ctx.strokeStyle = '#2c3e50';
    ctx.lineWidth = 10;
    ctx.stroke();
    
    // Draw the minute hand
    const minuteAngle = (Math.PI / 30) * minute;
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(clockRadius * 0.7 * Math.cos(minuteAngle - Math.PI / 2), clockRadius * 0.7 * Math.sin(minuteAngle - Math.PI / 2));
    ctx.strokeStyle = '#3498db';
    ctx.lineWidth = 6;
    ctx.stroke();
    
    // Draw the second hand
    const secondAngle = (Math.PI / 30) * second;
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(clockRadius * 0.8 * Math.cos(secondAngle - Math.PI / 2), clockRadius * 0.8 * Math.sin(secondAngle - Math.PI / 2));
    ctx.strokeStyle = '#e74c3c'; // Red color for second hand
    ctx.lineWidth = 3;
    ctx.stroke();

    // Draw the center circle (clock's center)
    ctx.beginPath();
    ctx.arc(0, 0, 8, 0, 2 * Math.PI);
    ctx.fillStyle = '#2c3e50';
    ctx.fill();
  }

  // Update the clock every second
  setInterval(drawClock, 1000);
  drawClock(); // Initial draw

  // Script untuk update jam dan tanggal hari ini
  function updateTime() {
    const now = new Date();
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' };
    document.getElementById('current-time').textContent = now.toLocaleString('id-ID', options);
  }

  setInterval(updateTime, 1000);  // Update every second
</script>
</body>
</html>

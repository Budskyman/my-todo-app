<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>To-Do List</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/styles.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f4f4;
    }

    .container {
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }

    h1 {
      text-align: center;
      color: #2c3e50;
    }

    .input-form {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }

    .input-form input,
    .input-form button {
      padding: 10px;
      font-size: 16px;
    }

    .input-form input[type="text"] {
      flex: 1;
    }

    .todo-list {
      list-style-type: none;
      padding: 0;
    }

    .todo-list li {
      background-color: white;
      padding: 15px;
      margin-bottom: 10px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
    }

    .delete-button {
      background-color: #e74c3c;
      color: white;
      border: none;
      padding: 5px 10px;
      cursor: pointer;
      font-size: 14px;
      border-radius: 5px;
    }

    .delete-button:hover {
      background-color: #c0392b;
    }

    #custom-notif {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: #2c3e50;
      color: white;
      padding: 30px;
      border-radius: 15px;
      box-shadow: 0 0 30px rgba(0,0,0,0.3);
      z-index: 9999;
      text-align: center;
      opacity: 0;
      transition: opacity 0.4s ease;
    }

    #custom-notif.show {
      opacity: 1;
    }

    #custom-notif.hidden {
      opacity: 0;
      pointer-events: none;
    }

    #analog-clock {
      display: block;
      margin: 0 auto 20px;
      max-width: 100%;
      height: auto;
    }

    #current-time {
      text-align: center;
      margin-bottom: 20px;
      font-size: 18px;
      color: #34495e;
    }

    @media (max-width: 768px) {
      .input-form {
        flex-direction: column;
      }

      .input-form input,
      .input-form button {
        width: 100%;
        margin: 5px 0;
      }

      .todo-list li {
        flex-direction: column;
        align-items: flex-start;
      }

      .delete-button {
        margin-top: 10px;
        align-self: flex-end;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>To-Do List</h1>

    <canvas id="analog-clock" width="300" height="300"></canvas>
    <div id="current-time"></div>

    <form action="/add" method="POST" class="input-form">
      <input type="text" name="todo" placeholder="Tambahkan tugas..." required>
      <input type="datetime-local" name="dueDate" required>
      <button type="submit">Tambah</button>
    </form>

    <ul class="todo-list">
      <% if (todos && todos.length > 0) { %>
        <% todos.forEach((item, index) => { %>
          <li>
            <span><%= item.text %></span>
            <span class="due-time" data-duedate="<%= item.dueDate %>"> - </span>
            <form action="/delete" method="POST" style="display:inline;">
              <input type="hidden" name="index" value="<%= index %>">
              <button type="submit" class="delete-button">Hapus</button>
            </form>
          </li>
        <% }) %>
      <% } else { %>
        <li>Tidak ada tugas</li>
      <% } %>
    </ul>
  </div>

  <audio id="notification-sound" src="/sounds/notification-sound.mp3" preload="auto"></audio>

  <div id="custom-notif" class="hidden">
    <h2 id="notif-title">Tugas Jatuh Tempo!</h2>
    <p id="notif-body">Isi tugas di sini</p>
  </div>

  <script>
    const notificationSound = document.getElementById('notification-sound');
    const todos = <%- JSON.stringify(todos) %>;
    const notifiedSet = new Set();

    document.querySelectorAll('.due-time').forEach(span => {
      const iso = span.dataset.duedate;
      const date = new Date(iso);
      const options = {
        weekday: 'long', year: 'numeric', month: 'long',
        day: 'numeric', hour: '2-digit', minute: '2-digit'
      };
      span.textContent = ' - ' + date.toLocaleString('id-ID', options);
    });

    function requestNotificationPermission() {
      if (Notification.permission !== 'granted') {
        Notification.requestPermission().then(permission => {
          if (permission === 'granted') {
            console.log("Notifikasi diizinkan");
          } else {
            console.warn("Notifikasi ditolak");
          }
        });
      }
    }

    function showCustomNotification(title, message) {
      const notif = document.getElementById('custom-notif');
      document.getElementById('notif-title').textContent = title;
      document.getElementById('notif-body').textContent = message;

      notif.classList.remove('hidden');
      notif.classList.add('show');

      setTimeout(() => {
        notif.classList.remove('show');
        notif.classList.add('hidden');
      }, 5000);
    }

    function checkForDueTasks() {
      const now = new Date();
      todos.forEach((item, index) => {
        const dueDate = new Date(item.dueDate);
        if (isNaN(dueDate.getTime())) return;

        if (now >= dueDate && !notifiedSet.has(index)) {
          notificationSound.pause();
          notificationSound.currentTime = 0;
          notificationSound.play();

          showCustomNotification(
            'Tugas Jatuh Tempo!',
            `${item.text}\n${dueDate.toLocaleString('id-ID')}`
          );

          if (Notification.permission === 'granted') {
            new Notification('Tugas Jatuh Tempo!', {
              body: `${item.text}\n${dueDate.toLocaleString('id-ID')}`,
              icon: '/icons/bell.png'
            });
          }

          notifiedSet.add(index);
        }
      });
    }

    requestNotificationPermission();
    setInterval(checkForDueTasks, 1000);

    // Jam analog
    const canvas = document.getElementById('analog-clock');
    const ctx = canvas.getContext('2d');
    const radius = canvas.height / 2;
    ctx.translate(radius, radius);
    const clockRadius = radius * 0.9;

    function drawClock() {
      const now = new Date();
      const hour = now.getHours();
      const minute = now.getMinutes();
      const second = now.getSeconds();

      ctx.clearRect(-radius, -radius, canvas.width, canvas.height);

      ctx.beginPath();
      ctx.arc(0, 0, clockRadius, 0, 2 * Math.PI);
      ctx.fillStyle = '#f3f3f3';
      ctx.fill();
      ctx.strokeStyle = '#2c3e50';
      ctx.lineWidth = 10;
      ctx.stroke();

      ctx.font = '20px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      for (let i = 1; i <= 12; i++) {
        const angle = (i - 3) * Math.PI / 6;
        const x = (clockRadius - 30) * Math.cos(angle);
        const y = (clockRadius - 30) * Math.sin(angle);
        ctx.fillStyle = '#2c3e50';
        ctx.fillText(i, x, y);
      }

      const hourAngle = (Math.PI / 6) * ((hour % 12) + minute / 60);
      ctx.beginPath();
      ctx.moveTo(0, 0);
      ctx.lineTo(clockRadius * 0.5 * Math.cos(hourAngle - Math.PI / 2), clockRadius * 0.5 * Math.sin(hourAngle - Math.PI / 2));
      ctx.strokeStyle = '#2c3e50';
      ctx.lineWidth = 10;
      ctx.stroke();

      const minuteAngle = (Math.PI / 30) * minute;
      ctx.beginPath();
      ctx.moveTo(0, 0);
      ctx.lineTo(clockRadius * 0.7 * Math.cos(minuteAngle - Math.PI / 2), clockRadius * 0.7 * Math.sin(minuteAngle - Math.PI / 2));
      ctx.strokeStyle = '#3498db';
      ctx.lineWidth = 6;
      ctx.stroke();

      const secondAngle = (Math.PI / 30) * second;
      ctx.beginPath();
      ctx.moveTo(0, 0);
      ctx.lineTo(clockRadius * 0.8 * Math.cos(secondAngle - Math.PI / 2), clockRadius * 0.8 * Math.sin(secondAngle - Math.PI / 2));
      ctx.strokeStyle = '#e74c3c';
      ctx.lineWidth = 3;
      ctx.stroke();

      ctx.beginPath();
      ctx.arc(0, 0, 8, 0, 2 * Math.PI);
      ctx.fillStyle = '#2c3e50';
      ctx.fill();
    }

    setInterval(drawClock, 1000);
    drawClock();

    function updateTime() {
      const now = new Date();
      const options = {
        weekday: 'long', year: 'numeric', month: 'long',
        day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit'
      };
      document.getElementById('current-time').textContent = now.toLocaleString('id-ID', options);
    }

    setInterval(updateTime, 1000);
    updateTime();
  </script>
</body>
</html>
